MODULE RNL__externalObject(SYSMODULE)

    !externalObject is an object that represents an external intelligent object.
    !It implements features for:
    ! - Relaying events from internal RPAID to the remote
    ! - Relay events from the remote and trigger them in RAPID
    ! - Allow remote object to execute arbitrary code
    !
    !The base object implements RMQ as the standard protocol for communication,
    !but is structured in a way that new object can inherit and overide this
    !object to support other protocols

    !Inherits from:
    ! - baseObject

    !Dependencies
    ! - 

    !***************************************************************************
    ! Data
    !***************************************************************************

    RECORD externalObject

        dataPointer self;

        dataPointer address;

    ENDRECORD

    !###########################################################################
    ! NEW Constructor and ERASE Destructor
    !###########################################################################

    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
    ! WRAPPER Methods
    !¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
    ! Getter and Setter Methods
    !&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

    !===========================================================================
    ! Public Object Methods
    !===========================================================================

    !Recives events from RAPID and trigger them in the remote object
    LOCAL PROC eventImporter(dataPointer object, eventInfo info)
        
        VAR externalObject object_;
        
        GetDataVal object.name,object_;
        
        try \obj:=object_.self, "sendEvent" 
        \arg1:=info.triggerObject 
        \trowError
        ;
    ENDPROC
    
    !///////////////////////////////////////////////////////////////////////////
    ! Privat Object Methods
    !///////////////////////////////////////////////////////////////////////////

    !Tries to trigger an event recived from the remote object
    LOCAL PROC recivedEvent_trigger(
        dataPointer object,
        dataPointer eventName,
        dataPointer id,
        dataPointer value
        )

        VAR event eventToTrigger;
        VAR string eventName_;
        VAR num id_;
        VAR externalObject object_;
        
        VAR datapos search_block;
        VAR string search_name;

        !Get data
        id_:=num_get(id);
        eventName_:=string_get(eventName);
        GetDataVal object.name,object_;

        
        IF id_<>num_NULL THEN
            !If ID is specified, used id
            eventToTrigger.id := id_;
            
        ELSEIF eventName_<>string_NULL THEN
            !If ID was not specified, search for name
        ELSE
            !ERROR
        ENDIF

        TRIGGER \object:=object_.self, eventToTrigger \data:=value;

    ERROR
        RAISE ;
    ENDPROC
    
    !Sends an event to the remote object
    LOCAL PROC eventExporter(
        dataPointer object,
        dataPointer eventName,
        dataPointer eventId,
        dataPointer eventObject,
        dataPointer eventValue,
        dataPointer eventTimestamp)
        
        <SMT>
        
    ENDPROC
    
!    !Tries to execute recived code
!    LOCAL PROC recivedCode_Execute(
!        dataPointer object,
!        dataPointer recivedCode,
!        dataPointer recivedCodeObject)
        
!        try \obj:=recivedCodeObject, recivedCode.value \trowError;
        
!    ENDPROC
    


    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ! Standardized Methods
    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




ENDMODULE