MODULE RNL__rmqslot(SYSMODULE)
    
!    RECORD rmqslot_list
!        rmqslot slot;
!        bool notNull;
!    ENDRECORD
    
!    LOCAL VAR rmqslot_list list{25};
    
!    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!    ! Standardized Methods
!    !%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
!    !DataPointer methods
    
!    PROC rmqslot_set(INOUT dataPointer pointer,VAR rmqslot value)
!        IF dataPointer_isReference(pointer) SetDataVal pointer.name,value;
!        !IF dataPointer_isValue(pointer) pointer.value := ValToStr(value);
!        !IF dataPointer_isIndex(pointer) list{pointer.id} := value;
!    ENDPROC
    
!    FUNC rmqslot rmqslot_get(dataPointer pointer)
!        VAR rmqslot returnValue;
!        IF dataPointer_isReference(pointer) GetDataVal pointer.name,returnValue;
!        !IF dataPointer_isValue(pointer) errFromBool StrToVal(pointer.value,returnValue),ERR_SYM_ACCESS;
!        !IF dataPointer_isIndex(pointer) returnValue := returnValue;
!        RETURN returnValue;
!    ENDFUNC
    
!    FUNC dataPointer rmqslot_(string value)
!        VAR dataPointer pointer;
!        pointer.type := type(value);
!        !pointer.name := argName(value);
!        pointer.value := ValToStr(value);
!        RETURN pointer;
!    ENDFUNC
    
!    PROC rmqslot_NEW()
!        <SMT>
!    ENDPROC
    
!    !LIST methods
    
!    !Append a datapointer to the list
!    PROC LIST_rmqslot_append(INOUT rmqslot_list list{*},VAR rmqslot item)

!        VAR rmqslot_list NULL;
!        NULL.notNull:=TRUE;

!        FOR i FROM 1 TO Dim(list,1) DO
!            IF list{i}.notNull=NULL.notNull THEN
!                list{i}:=item;
!                RETURN ;
!            ENDIF
!        ENDFOR

!    ENDPROC

!    !Pop the last data pointer in the list
!    FUNC rmqslot LIST_rmqslot_pop(INOUT rmqslot_list list{*})

!        VAR rmqslot_list item;
!        VAR rmqslot_list NULL;
!        NULL.notNull:=TRUE;

!        FOR i FROM Dim(list,1) TO 1 DO
!            IF list{i}.notNull<>NULL.notNull THEN
!                item:=list{i};
!                list{i}:=NULL;
!                RETURN item.slot;
!            ENDIF
!        ENDFOR

!    ENDFUNC

!    !Returns the number of items actively used in the list
!    FUNC num LIST_rmqslot_lenght(INOUT rmqslot_list list{*})

!        VAR num lenght;
!        VAR rmqslot_list NULL;
!        lenght:=0;
!        NULL.notNull:=TRUE;

!        FOR i FROM 1 TO Dim(list,1) DO
!            IF list{i}.notNull<>NULL.notNull THEN
!                lenght:=lenght+1;
!            ENDIF
!        ENDFOR

!        RETURN lenght;

!    ENDFUNC
    
ENDMODULE